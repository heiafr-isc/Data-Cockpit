name: Publish

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'changelog-update/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: central
        settings-path: ${{ github.workspace }}

    - name: Check for Patch Update
      id: check_patch
      run: |
        CHANGELOG=$(cat CHANGELOG.md)
        echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        if echo "$CHANGELOG" | grep -q "## Unreleased"; then
          AFTER_UNRELEASED=$(echo "$CHANGELOG" | sed -n '/## Unreleased/{n;p;}')
          if echo "$AFTER_UNRELEASED" | grep -q "### "; then
            echo "IS_PATCH=true" >> $GITHUB_ENV
          else
            echo "IS_PATCH=false" >> $GITHUB_ENV
          fi
        else
          echo "IS_PATCH=false" >> $GITHUB_ENV
        fi

    - name: Import GPG key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import --pinentry-mode loopback
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Extract modules from release notes
      id: extract_data
      run: |
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
        RELEASE_NOTES=$(curl -sL -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" $RELEASE_URL)
        DESCRIPTION=$(echo "$RELEASE_NOTES" | jq -r '.body')
    
        # Define module names to search for (case insensitive)
        MODULE_NAMES=("tree:" "database:" "visualizer:" "general_libraries:" "experiments:")
    
        # Initialize MODULES variable
        MODULES=""
    
        # Loop through each module name
        for module in "${MODULE_NAMES[@]}"; do
          # Search for module names followed by ":"
          modules_found=$(echo "$DESCRIPTION" | grep -i "$module" | sed 's/:.*//' | tr '\n' ',' | sed 's/,$//' | sed 's/^- //')
          if [ -n "$modules_found" ]; then
            MODULES="$MODULES,$modules_found"  # Append modules to MODULES variable
          fi
        done
    
        # Remove leading comma and sort modules alphabetically
        MODULES=$(echo "$MODULES" | sed 's/^,//' | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/^- //')
        
        # Remove duplicates
        MODULES=$(echo "$MODULES" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
    
        # Print and set outputs
        echo "modules=$MODULES" >> $GITHUB_ENV
        echo "::set-output name=modules::$MODULES"

    - name: Create temporary settings file
      run: |
        echo "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"
                      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
                      xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">
                <servers>
                    <server>
                        <id>central</id>
                        <username>${{ secrets.MAVEN_USERNAME }}</username>
                        <password>${{ secrets.MAVEN_PASSWORD }}</password>
                    </server>
                </servers>
            </settings>" > config.xml

    - name: Deploy Parent POM
      run: mvn -B clean deploy -N -DskipTests -s config.xml -Dgpg.executable=gpg -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" -Dgpg.use-agent=false -Dgpg.loopback=true
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Build and Deploy Modules
      if: env.IS_PATCH == 'false'
      run: |
        MODULES="${{ steps.extract_data.outputs.modules }}"
        echo "Modules to build: $MODULES"
        IFS=',' read -r -a MODULE_ARRAY <<< "$MODULES"
        for MODULE in "${MODULE_ARRAY[@]}"; do
          echo "Building and deploying module: $MODULE"
          mvn -B clean deploy -pl $MODULE -am -DskipTests -s config.xml -Dgpg.executable=gpg -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" -Dgpg.use-agent=false -Dgpg.loopback=true
        done
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
